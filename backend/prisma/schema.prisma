// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                          Int     @id     @default(autoincrement()) 
  username                    String  @unique
  intra_id                    String  @unique
  avatar                      String
  rating                      Int     @default(700)
  is_two_factor_auth_enabled  Boolean @default(false)
  two_factor_auth_secret      String?

  //relations

  //friendship table
  sender      friendships[] @relation("SentFriendships")
  acceptor    friendships[] @relation("ReceivedFriendships")
  //game
  player_one  games[]       @relation("player_one")
  player_two  games[]       @relation("player_two")
  //message
  message     messages[]    @relation("messages_users")
  //management
  management  managements[] @relation("managements_users")
  //achievements
  achievement achievements[] @relation("achievements_users")

}

model friendships {
  id                  Int     @id @default(autoincrement())
  acceptor_id         Int
  sender_id           Int
  is_acceptor_blocked Boolean @default(false)
  is_sender_blocked   Boolean @default(false)
  fr_state            Boolean @default(false)

  //relations
  sender   users @relation("SentFriendships", fields: [sender_id], references: [id])
  acceptor users @relation("ReceivedFriendships", fields: [acceptor_id], references: [id])
  @@unique([acceptor_id, sender_id]) 
}

model games {
  id                  Int @id @default(autoincrement())
  player_one_id       Int
  player_two_id       Int
  player_one_score    Int
  player_two_score    Int
  date                DateTime @default(now())

  //relations 
  player_one users @relation("player_one", fields: [player_one_id], references: [id])
  player_two users @relation("player_two", fields: [player_two_id], references: [id])
}

model rooms {
  id            Int @id @default(autoincrement())
  name          String? @unique
  type          String
  password      String?

  //relations
  //messages
  message     messages[]    @relation("messages_rooms")
  //management
  management  managements[] @relation("managements_rooms")

}

model messages {
  id            Int @id @default(autoincrement())
  user_id       Int
  room_id       Int
  message       String
  date          DateTime @default(now())

  //relations

  //room
  room rooms @relation("messages_rooms", fields: [room_id], references: [id])
  //user
  user users @relation("messages_users", fields: [user_id], references: [id])
}

model managements {
  id            Int  @id @default(autoincrement())
  room_id       Int
  user_id       Int
  role          String
  is_muted      Boolean @default(false)
  mute_start    DateTime?
  mute_end      DateTime?
  is_banned     Boolean @default(false)
  //relations
  //room
  room  rooms @relation("managements_rooms", fields: [room_id], references: [id])
  user  users @relation("managements_users", fields: [user_id], references: [id])
}

model achievements {
  id            Int @id @default(autoincrement())
  name          String
  user_id       Int

  //relations
  user  users @relation("achievements_users", fields: [user_id], references: [id])
}




